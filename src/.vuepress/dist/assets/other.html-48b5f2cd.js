import{_ as k,X as r,Y as d,Z as n,$ as s,a0 as a,a1 as o,a2 as p,H as i}from"./framework-edbf9e3c.js";const m={},b={id:"_1-两数之和",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#_1-两数之和","aria-hidden":"true"},"#",-1),h={href:"https://leetcode.cn/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"},f=p(`<blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
        <span class="token keyword">if</span> preIndex<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span>target<span class="token operator">-</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>preIndex<span class="token punctuation">,</span> index<span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            m<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> index
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),y={id:"_146-lru缓存",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#_146-lru缓存","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.cn/problems/lru-cache",target:"_blank",rel:"noopener noreferrer"},_=n("blockquote",null,[n("p",null,"请你设计并实现一个满足 LRU (最近最少使用) 缓存 约束的数据结构。 实现 LRUCache 类： LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存 int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。 void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。 函数 get 和 put 必须以 O(1) 的平均时间复杂度运行。")],-1),x=n("p",null,[n("strong",null,"解题思路"),s("：LRU缓存是考察数据结构能力的题目，它本质上由一个"),n("strong",null,"双端链表"),s("与一个"),n("strong",null,"hash表"),s("构成。双端链表用于存放具体的键值对，hash表的作用是能根据key以O(1)的复杂度找到相应的键值对。注意一下链表的增删，容易在这里出错。")],-1),q=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token class-name"},"node"),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" key"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" val"),n("span",{class:"token punctuation"},";"),s(`
    node`),n("span",{class:"token operator"},"*"),s(" pre"),n("span",{class:"token punctuation"},";"),s(`
    node`),n("span",{class:"token operator"},"*"),s(" next"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"node"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" _key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" _val"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"key"),n("span",{class:"token punctuation"},"("),s("_key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"val"),n("span",{class:"token punctuation"},"("),s("_val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"LRUCache"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
    unordered_map`),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},","),s(" node"),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},">"),s(" hash"),n("span",{class:"token punctuation"},";"),s(`
    node`),n("span",{class:"token operator"},"*"),s(" begin"),n("span",{class:"token punctuation"},";"),s(`
    node`),n("span",{class:"token operator"},"*"),s(" end"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" capacity"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"int"),s(" size "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token function"},"LRUCache"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" _capacity"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        begin `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token function"},"node"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        end `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token function"},"node"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        begin`),n("span",{class:"token operator"},"->"),s("next "),n("span",{class:"token operator"},"="),s(" end"),n("span",{class:"token punctuation"},";"),s(`
        end`),n("span",{class:"token operator"},"->"),s("pre "),n("span",{class:"token operator"},"="),s(" begin"),n("span",{class:"token punctuation"},";"),s(`
        capacity `),n("span",{class:"token operator"},"="),s(" _capacity"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
    `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token operator"},"*"),s(" pre"),n("span",{class:"token punctuation"},","),s(" node"),n("span",{class:"token operator"},"*"),s(" cur"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        node`),n("span",{class:"token operator"},"*"),s(" next "),n("span",{class:"token operator"},"="),s(" pre"),n("span",{class:"token operator"},"->"),s("next"),n("span",{class:"token punctuation"},";"),s(`
        pre`),n("span",{class:"token operator"},"->"),s("next "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},";"),s(`
        cur`),n("span",{class:"token operator"},"->"),s("pre "),n("span",{class:"token operator"},"="),s(" pre"),n("span",{class:"token punctuation"},";"),s(`
        cur`),n("span",{class:"token operator"},"->"),s("next "),n("span",{class:"token operator"},"="),s(" next"),n("span",{class:"token punctuation"},";"),s(`
        next`),n("span",{class:"token operator"},"->"),s("pre "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"int"),s(),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("hash"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"count"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        node`),n("span",{class:"token operator"},"*"),s(" cur "),n("span",{class:"token operator"},"="),s(" hash"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        node`),n("span",{class:"token operator"},"*"),s(" pre "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token operator"},"->"),s("pre"),n("span",{class:"token punctuation"},";"),s(`
        node`),n("span",{class:"token operator"},"*"),s(" next "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token operator"},"->"),s("next"),n("span",{class:"token punctuation"},";"),s(`
        pre`),n("span",{class:"token operator"},"->"),s("next "),n("span",{class:"token operator"},"="),s(" next"),n("span",{class:"token punctuation"},";"),s(`
        next`),n("span",{class:"token operator"},"->"),s("pre "),n("span",{class:"token operator"},"="),s(" pre"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("begin"),n("span",{class:"token punctuation"},","),s(" cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" cur"),n("span",{class:"token operator"},"->"),s("val"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    
    `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"int"),s(" value"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("hash"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"count"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            hash`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"->"),s("val "),n("span",{class:"token operator"},"="),s(" value"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("size "),n("span",{class:"token operator"},">="),s(" capacity"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            node`),n("span",{class:"token operator"},"*"),s(" cur "),n("span",{class:"token operator"},"="),s(" end"),n("span",{class:"token operator"},"->"),s("pre"),n("span",{class:"token punctuation"},";"),s(`
            node`),n("span",{class:"token operator"},"*"),s(" pre "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token operator"},"->"),s("pre"),n("span",{class:"token punctuation"},";"),s(`
            node`),n("span",{class:"token operator"},"*"),s(" next "),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token operator"},"->"),s("next"),n("span",{class:"token punctuation"},";"),s(`
            pre`),n("span",{class:"token operator"},"->"),s("next "),n("span",{class:"token operator"},"="),s(" next"),n("span",{class:"token punctuation"},";"),s(`
            next`),n("span",{class:"token operator"},"->"),s("pre "),n("span",{class:"token operator"},"="),s(" pre"),n("span",{class:"token punctuation"},";"),s(`
            hash`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"erase"),n("span",{class:"token punctuation"},"("),s("cur"),n("span",{class:"token operator"},"->"),s("key"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            size`),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        node`),n("span",{class:"token operator"},"*"),s(" cur "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token function"},"node"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("begin"),n("span",{class:"token punctuation"},","),s(" cur"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        hash`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" cur"),n("span",{class:"token punctuation"},";"),s(`
        size`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[n("span",{class:"token keyword"},"type"),s(" LRUCache "),n("span",{class:"token keyword"},"struct"),s(),n("span",{class:"token punctuation"},"{"),s(`
    capacity `),n("span",{class:"token builtin"},"int"),s(`
    m `),n("span",{class:"token keyword"},"map"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"*"),s(`Node
    head`),n("span",{class:"token punctuation"},","),s("tail "),n("span",{class:"token operator"},"*"),s(`Node
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"type"),s(" Node "),n("span",{class:"token keyword"},"struct"),n("span",{class:"token punctuation"},"{"),s(`
    Key `),n("span",{class:"token builtin"},"int"),s(`
    Val `),n("span",{class:"token builtin"},"int"),s(`
    Pre`),n("span",{class:"token punctuation"},","),s(" Next "),n("span",{class:"token operator"},"*"),s(`Node
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"Constructor"),n("span",{class:"token punctuation"},"("),s("capacity "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(" LRUCache "),n("span",{class:"token punctuation"},"{"),s(`
    head`),n("span",{class:"token punctuation"},","),s("tail "),n("span",{class:"token operator"},":="),s(),n("span",{class:"token operator"},"&"),s("Node"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),n("span",{class:"token operator"},"&"),s("Node"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
    head`),n("span",{class:"token punctuation"},"."),s("Next "),n("span",{class:"token operator"},"="),s(` tail
    tail`),n("span",{class:"token punctuation"},"."),s("Pre "),n("span",{class:"token operator"},"="),s(` head
    `),n("span",{class:"token keyword"},"return"),s(" LRUCache"),n("span",{class:"token punctuation"},"{"),s(`
        capacity`),n("span",{class:"token punctuation"},":"),s(" capacity"),n("span",{class:"token punctuation"},","),s(` 
        m`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"map"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"*"),s("Node"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(` 
        head`),n("span",{class:"token punctuation"},":"),s(" head"),n("span",{class:"token punctuation"},","),s(` 
        tail`),n("span",{class:"token punctuation"},":"),s(" tail"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token punctuation"},"("),s("this "),n("span",{class:"token operator"},"*"),s("LRUCache"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"deleteNode"),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"*"),s("Node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    node`),n("span",{class:"token punctuation"},"."),s("Pre"),n("span",{class:"token punctuation"},"."),s("Next "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s(`Next
    node`),n("span",{class:"token punctuation"},"."),s("Next"),n("span",{class:"token punctuation"},"."),s("Pre "),n("span",{class:"token operator"},"="),s(" node"),n("span",{class:"token punctuation"},"."),s(`Pre
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token punctuation"},"("),s("this "),n("span",{class:"token operator"},"*"),s("LRUCache"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"removeTail"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"{"),s(`
    node `),n("span",{class:"token operator"},":="),s(" this"),n("span",{class:"token punctuation"},"."),s("tail"),n("span",{class:"token punctuation"},"."),s(`Pre
    this`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"deleteNode"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" node"),n("span",{class:"token punctuation"},"."),s(`Key
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token punctuation"},"("),s("this "),n("span",{class:"token operator"},"*"),s("LRUCache"),n("span",{class:"token punctuation"},")"),n("span",{class:"token function"},"addToHead"),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"*"),s("Node"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
    this`),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"."),s("Next"),n("span",{class:"token punctuation"},"."),s("Pre "),n("span",{class:"token operator"},"="),s(` node
    node`),n("span",{class:"token punctuation"},"."),s("Next "),n("span",{class:"token operator"},"="),s(" this"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"."),s(`Next
    node`),n("span",{class:"token punctuation"},"."),s("Pre "),n("span",{class:"token operator"},"="),s(" this"),n("span",{class:"token punctuation"},"."),s(`head
    this`),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"."),s("Next "),n("span",{class:"token operator"},"="),s(` node
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token punctuation"},"("),s("this "),n("span",{class:"token operator"},"*"),s("LRUCache"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"moveToHead"),n("span",{class:"token punctuation"},"("),s("node "),n("span",{class:"token operator"},"*"),s("Node"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    this`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"deleteNode"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),s(`
    this`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addToHead"),n("span",{class:"token punctuation"},"("),s("node"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token punctuation"},"("),s("this "),n("span",{class:"token operator"},"*"),s("LRUCache"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"Get"),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" v"),n("span",{class:"token punctuation"},","),s("ok "),n("span",{class:"token operator"},":="),s(" this"),n("span",{class:"token punctuation"},"."),s("m"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s("ok"),n("span",{class:"token punctuation"},"{"),s(`
        this`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"moveToHead"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" v"),n("span",{class:"token punctuation"},"."),s(`Val
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token punctuation"},"("),s("this "),n("span",{class:"token operator"},"*"),s("LRUCache"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token function"},"Put"),n("span",{class:"token punctuation"},"("),s("key "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" value "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s("  "),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" v"),n("span",{class:"token punctuation"},","),s("ok "),n("span",{class:"token operator"},":="),s(" this"),n("span",{class:"token punctuation"},"."),s("m"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s("ok"),n("span",{class:"token punctuation"},"{"),s(`
        v`),n("span",{class:"token punctuation"},"."),s("Val "),n("span",{class:"token operator"},"="),s(` value
        this`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"moveToHead"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token keyword"},"return"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" this"),n("span",{class:"token punctuation"},"."),s("capacity"),n("span",{class:"token operator"},"=="),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("this"),n("span",{class:"token punctuation"},"."),s("m"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        rmKey `),n("span",{class:"token operator"},":="),s(" this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"removeTail"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token function"},"delete"),n("span",{class:"token punctuation"},"("),s("this"),n("span",{class:"token punctuation"},"."),s("m"),n("span",{class:"token punctuation"},","),s("rmKey"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    newNode `),n("span",{class:"token operator"},":="),s(),n("span",{class:"token operator"},"&"),s("Node"),n("span",{class:"token punctuation"},"{"),s("Key"),n("span",{class:"token punctuation"},":"),s(" key"),n("span",{class:"token punctuation"},","),s(" Val"),n("span",{class:"token punctuation"},":"),s(" value"),n("span",{class:"token punctuation"},"}"),s(`
    this`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addToHead"),n("span",{class:"token punctuation"},"("),s("newNode"),n("span",{class:"token punctuation"},")"),s(`
    this`),n("span",{class:"token punctuation"},"."),s("m"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` newNode
`),n("span",{class:"token punctuation"},"}"),s(`


`),n("span",{class:"token comment"},`/**
 * Your LRUCache object will be instantiated and called as such:
 * obj := Constructor(capacity);
 * param_1 := obj.Get(key);
 * obj.Put(key,value);
 */`),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("hr",null,null,-1),C={id:"_15-三数之和",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#_15-三数之和","aria-hidden":"true"},"#",-1),L={href:"https://leetcode.cn/problems/3sum",target:"_blank",rel:"noopener noreferrer"},P=p("<blockquote><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请</p><p>你返回所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p></blockquote><p><strong>解题思路</strong>：</p><ul><li><strong>双指针</strong>经典题目,比较naive的做法就是三次遍历O(n<sup>3</sup>)的复杂度，这肯定是不行的，我们可以先排序，将无序数组转成有序的，然后在第二次与第三次遍历上做文章，优化的复杂度可以达到O(n<sup>2</sup>)。</li><li>对数组进行排序，使用三个指针 i、j 和 k 分别代表要找的三个数。通过枚举 i 确定第一个数，另外两个指针 j，k 分别从左边 i + 1 和右边 n - 1 往中间移动，通过比较sum与0的大小，找到满足 sum = 0的所有组合。 由于题目要求答案不能包含重复的三元组，所以在确定第一个数和第二个数的时候，要跳过数值一样的下标（在三数之和确定的情况下，确保第一个数和第二个数不会重复，即可保证三元组不重复）</li></ul>",3),Q=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s("    vector"),n("span",{class:"token operator"},"<"),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token function"},"threeSum"),n("span",{class:"token punctuation"},"("),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"&"),s(" nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token function"},"sort"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"begin"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"end"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" n "),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        vector`),n("span",{class:"token operator"},"<"),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">>"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
        vector`),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"tmp"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token keyword"},"int"),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"-"),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" r "),n("span",{class:"token operator"},"="),s(" n "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" l "),n("span",{class:"token operator"},"="),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" l "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" l"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("l "),n("span",{class:"token operator"},"!="),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"&&"),s(" nums"),n("span",{class:"token punctuation"},"["),s("l"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" nums"),n("span",{class:"token punctuation"},"["),s("l "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token keyword"},"continue"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),s("l "),n("span",{class:"token operator"},"<"),s(" r "),n("span",{class:"token operator"},"&&"),s(" nums"),n("span",{class:"token punctuation"},"["),s("l"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(" nums"),n("span",{class:"token punctuation"},"["),s("r"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},">"),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    r`),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("l "),n("span",{class:"token operator"},"<"),s(" r "),n("span",{class:"token operator"},"&&"),s(" nums"),n("span",{class:"token punctuation"},"["),s("l"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(" nums"),n("span",{class:"token punctuation"},"["),s("r"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    tmp`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
                    tmp`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"["),s("l"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
                    tmp`),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"["),s("r"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
                    ans`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("tmp"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"threeSum"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    sort`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Ints"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),s(`
    res `),n("span",{class:"token operator"},":="),s(),n("span",{class:"token function"},"make"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"for"),s(" i"),n("span",{class:"token operator"},":="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},"<"),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">"),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(` res
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" i"),n("span",{class:"token operator"},">"),n("span",{class:"token number"},"0"),n("span",{class:"token operator"},"&&"),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"=="),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"continue"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        l `),n("span",{class:"token operator"},":="),s(" i "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),s(`
        r `),n("span",{class:"token operator"},":="),s(),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" l"),n("span",{class:"token operator"},"<"),s("r"),n("span",{class:"token punctuation"},"{"),s(`
            sum `),n("span",{class:"token operator"},":="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(" nums"),n("span",{class:"token punctuation"},"["),s("l"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+"),s(" nums"),n("span",{class:"token punctuation"},"["),s("r"),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" sum "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"{"),s(`
            res `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"append"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"{"),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s("nums"),n("span",{class:"token punctuation"},"["),s("l"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s("nums"),n("span",{class:"token punctuation"},"["),s("r"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token keyword"},"for"),s(" l"),n("span",{class:"token operator"},"<"),s("r"),n("span",{class:"token operator"},"&&"),s("nums"),n("span",{class:"token punctuation"},"["),s("l"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"=="),s("nums"),n("span",{class:"token punctuation"},"["),s("l"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"{"),s(`
                l`),n("span",{class:"token operator"},"++"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token keyword"},"for"),s(" l"),n("span",{class:"token operator"},"<"),s("r"),n("span",{class:"token operator"},"&&"),s("nums"),n("span",{class:"token punctuation"},"["),s("r"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"=="),s("nums"),n("span",{class:"token punctuation"},"["),s("r"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"{"),s(`
                r`),n("span",{class:"token operator"},"--"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            l`),n("span",{class:"token operator"},"++"),s(`
            r`),n("span",{class:"token operator"},"--"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(" sum"),n("span",{class:"token operator"},">"),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"{"),s(`
            r`),n("span",{class:"token operator"},"--"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},"{"),s(`
            l`),n("span",{class:"token operator"},"++"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` res
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("hr",null,null,-1),S={id:"_42-接雨水",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#_42-接雨水","aria-hidden":"true"},"#",-1),D={href:"https://leetcode.cn/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"},V=n("blockquote",null,[n("p",null,"给定 n个非负整数表示每个宽度为1的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。")],-1),z=n("p",null,[n("strong",null,"解题思路"),s("：")],-1),T=n("ul",null,[n("li",null,[s("思路1："),n("strong",null,"单调栈"),s("问题，对于每一个凹的区域，它所能接的水是要看距离它最近的比它高的位置的高度，单调栈遍历一圈，将每个位置上所能接到的水存下来即可。 时间复杂度O(n)。")]),n("li",null,[s("思路2："),n("strong",null,"双指针"),s("的思路，一开始左右两个指针指向数组的两边，判断左边和右边哪边高，假设是左边高，那么此时在l指针这一格里，右边一定有人挡水，且右边的max一定比左边的max高(因为如果左边更高左边就会卡着不动)，所以此时这一格接到的水就是左边的max - 当前的高度；当右边高时同理。")])],-1),A=n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[s("    "),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token function"},"trap"),n("span",{class:"token punctuation"},"("),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token builtin"},"int"),n("span",{class:"token operator"},">"),n("span",{class:"token operator"},"&"),s(" height"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        vector`),n("span",{class:"token operator"},"<"),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token builtin"},"int"),n("span",{class:"token operator"},">>"),s(" st"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token builtin"},"int"),s(" n "),n("span",{class:"token operator"},"="),s(" height"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token builtin"},"int"),s(" ans "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"int"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" n"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"while"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&&"),s(" height"),n("span",{class:"token punctuation"},"["),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" height"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                vector`),n("span",{class:"token operator"},"<"),n("span",{class:"token builtin"},"int"),n("span",{class:"token operator"},">"),s(" t "),n("span",{class:"token operator"},"="),s(" st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop_back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token builtin"},"int"),s(" high "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),s("height"),n("span",{class:"token punctuation"},"["),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" height"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(" height"),n("span",{class:"token punctuation"},"["),s("t"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
                    ans `),n("span",{class:"token operator"},"+="),s(" high"),n("span",{class:"token operator"},"*"),n("span",{class:"token punctuation"},"("),s("i "),n("span",{class:"token operator"},"-"),s(" st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(" height"),n("span",{class:"token punctuation"},"["),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},">"),s(" height"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                vector`),n("span",{class:"token operator"},"<"),n("span",{class:"token builtin"},"int"),n("span",{class:"token operator"},">"),s(" add "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(" i "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
                st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("add"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("height"),n("span",{class:"token punctuation"},"["),s("st"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"=="),s(" height"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                st`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"emplace_back"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" ans"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"trap"),n("span",{class:"token punctuation"},"("),s("height "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"var"),s(" left"),n("span",{class:"token punctuation"},","),s(" right"),n("span",{class:"token punctuation"},","),s(" leftMax"),n("span",{class:"token punctuation"},","),s(" rightMax"),n("span",{class:"token punctuation"},","),s(" res "),n("span",{class:"token builtin"},"int"),s(`
	right `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("height"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),s(`
	`),n("span",{class:"token keyword"},"for"),s(" left "),n("span",{class:"token operator"},"<"),s(" right "),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"if"),s(" height"),n("span",{class:"token punctuation"},"["),s("left"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" height"),n("span",{class:"token punctuation"},"["),s("right"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(" height"),n("span",{class:"token punctuation"},"["),s("left"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},">="),s(" leftMax "),n("span",{class:"token punctuation"},"{"),s(`
				leftMax `),n("span",{class:"token operator"},"="),s(" height"),n("span",{class:"token punctuation"},"["),s("left"),n("span",{class:"token punctuation"},"]"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
				res `),n("span",{class:"token operator"},"+="),s(" leftMax "),n("span",{class:"token operator"},"-"),s(" height"),n("span",{class:"token punctuation"},"["),s("left"),n("span",{class:"token punctuation"},"]"),s(` 
			`),n("span",{class:"token punctuation"},"}"),s(`
			left`),n("span",{class:"token operator"},"++"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(" height"),n("span",{class:"token punctuation"},"["),s("right"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},">"),s(" rightMax "),n("span",{class:"token punctuation"},"{"),s(` 
				rightMax `),n("span",{class:"token operator"},"="),s(" height"),n("span",{class:"token punctuation"},"["),s("right"),n("span",{class:"token punctuation"},"]"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
				res `),n("span",{class:"token operator"},"+="),s(" rightMax "),n("span",{class:"token operator"},"-"),s(" height"),n("span",{class:"token punctuation"},"["),s("right"),n("span",{class:"token punctuation"},"]"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
			right`),n("span",{class:"token operator"},"--"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(` res
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),K=n("hr",null,null,-1),H={id:"_704-二分查找",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#_704-二分查找","aria-hidden":"true"},"#",-1),E={href:"https://leetcode.cn/problems/binary-search/",target:"_blank",rel:"noopener noreferrer"},B=p(`<blockquote><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">search</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> l<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token punctuation">{</span>
        m <span class="token operator">:=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">{</span>
            <span class="token keyword">return</span> m
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target <span class="token punctuation">{</span>
            r <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            l <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),W={id:"_7-整数反转",tabindex:"-1"},Y=n("a",{class:"header-anchor",href:"#_7-整数反转","aria-hidden":"true"},"#",-1),F={href:"https://leetcode.cn/problems/reverse-integer",target:"_blank",rel:"noopener noreferrer"},J=p(`<blockquote><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−231, 231 − 1] ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p></blockquote><div class="language-GO line-numbers-mode" data-ext="GO"><pre class="language-GO"><code>func reverse(x int) int {
	res := 0
	for x != 0 {
		res = res*10 + x%10
		x = x/10
	}
	if res &lt;= math.MinInt32 || res &gt;= math.MaxInt32 {
		return 0
	}
	return res
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),X={id:"_69-x的平方根",tabindex:"-1"},Z=n("a",{class:"header-anchor",href:"#_69-x的平方根","aria-hidden":"true"},"#",-1),$={href:"https://leetcode.cn/problems/sqrtx/",target:"_blank",rel:"noopener noreferrer"},nn=p(`<blockquote><p>给你一个非负整数 x ，计算并返回 x 的 算术平方根 。</p><p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p><p>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 精确到个位</span>
<span class="token keyword">func</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span>x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    l<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> x
    <span class="token keyword">for</span> l <span class="token operator">&lt;=</span> r <span class="token punctuation">{</span>
        mid <span class="token operator">:=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> mid <span class="token operator">*</span> mid <span class="token punctuation">{</span>
            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> r
<span class="token punctuation">}</span>

<span class="token comment">// 精确到3位小数</span>
<span class="token keyword">func</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	l<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> x
	<span class="token keyword">for</span> l <span class="token operator">&lt;=</span> r <span class="token punctuation">{</span>
		mid <span class="token operator">:=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span>
		<span class="token keyword">if</span> x <span class="token operator">&lt;</span> mid<span class="token operator">*</span>mid <span class="token punctuation">{</span>
			r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1e-3</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1e-3</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),sn={id:"_209-长度最小的子数组",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#_209-长度最小的子数组","aria-hidden":"true"},"#",-1),tn={href:"https://leetcode.cn/problems/minimum-size-subarray-sum",target:"_blank",rel:"noopener noreferrer"},pn=p(`<blockquote><p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p><p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>target <span class="token builtin">int</span><span class="token punctuation">,</span> nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> 
    i <span class="token operator">:=</span> <span class="token number">0</span>
    l <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    sum <span class="token operator">:=</span> <span class="token number">0</span>    
    result <span class="token operator">:=</span> l <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token keyword">for</span> sum <span class="token operator">&gt;=</span> target <span class="token punctuation">{</span>
            subLength <span class="token operator">:=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">if</span> subLength <span class="token operator">&lt;</span> result <span class="token punctuation">{</span>
                result <span class="token operator">=</span> subLength
            <span class="token punctuation">}</span>
            sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            i<span class="token operator">++</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> result <span class="token operator">==</span> l<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> result
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),on={id:"_54-螺旋矩阵",tabindex:"-1"},en=n("a",{class:"header-anchor",href:"#_54-螺旋矩阵","aria-hidden":"true"},"#",-1),cn={href:"https://leetcode.cn/problems/spiral-matrix/",target:"_blank",rel:"noopener noreferrer"},ln=p("<blockquote><p>给你一个<code>m</code>行<code>n</code>列的矩阵<code>matrix</code>，请按照<strong>顺时针螺旋顺序</strong>，返回矩阵中的所有元素。</p><p><strong>子数组</strong>是数组中的一个连续部分。</p></blockquote><p><strong>解题思路</strong>：<strong>状态机模拟</strong>题目，我们可以定义上下左右四个方向状态为1,2,3,4；一开始方向状态为右，当右碰到边界或者已经遍历过的元素了，就将状态变成下；当下走到边界或者已经遍历过的元素了，就将状态变成左，以此类推，当所有位置都遍历完了，就可以得到的答案。</p>",2),un=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s("    vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token function"},"spiralOrder"),n("span",{class:"token punctuation"},"("),s("vector"),n("span",{class:"token operator"},"<"),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">>"),n("span",{class:"token operator"},"&"),s(" matrix"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        vector`),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" first"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" second"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" count"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"int"),s(" direction"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"// 上右下左"),s(`
        `),n("span",{class:"token keyword"},"while"),n("span",{class:"token punctuation"},"("),s("count"),n("span",{class:"token operator"},"<"),s("matrix"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"*"),s("matrix"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
            res`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push_back"),n("span",{class:"token punctuation"},"("),s("matrix"),n("span",{class:"token punctuation"},"["),s("first"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("second"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            matrix`),n("span",{class:"token punctuation"},"["),s("first"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("second"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"101"),n("span",{class:"token punctuation"},";"),s(`
            count`),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token keyword"},"switch"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),s(` 
                    `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("first"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"0"),s(),n("span",{class:"token operator"},"&&"),s(" direction"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(" direction"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"&&"),s(" matrix"),n("span",{class:"token punctuation"},"["),s("first"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("second"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"101"),n("span",{class:"token punctuation"},")"),s(" direction"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token operator"},":"),s(`
                    `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"&&"),s(" second"),n("span",{class:"token operator"},"=="),s("matrix"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(" direction"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"&&"),s(" matrix"),n("span",{class:"token punctuation"},"["),s("first"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("second"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"101"),n("span",{class:"token punctuation"},")"),s(" direction"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"3"),n("span",{class:"token operator"},":"),s(`
                    `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"&&"),s(" first"),n("span",{class:"token operator"},"=="),s("matrix"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(" direction"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"&&"),s(" matrix"),n("span",{class:"token punctuation"},"["),s("first"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("second"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"101"),n("span",{class:"token punctuation"},")"),s(" direction"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"4"),n("span",{class:"token operator"},":"),s(`
                    `),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"4"),s(),n("span",{class:"token operator"},"&&"),s(" second"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(" direction"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"4"),s(),n("span",{class:"token operator"},"&&"),s(" matrix"),n("span",{class:"token punctuation"},"["),s("first"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("second"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"101"),n("span",{class:"token punctuation"},")"),s(" direction"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            `),n("span",{class:"token keyword"},"switch"),n("span",{class:"token punctuation"},"("),s("direction"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),s(" first"),n("span",{class:"token operator"},"-="),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token operator"},":"),s(" second"),n("span",{class:"token operator"},"+="),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"3"),n("span",{class:"token operator"},":"),s(" first"),n("span",{class:"token operator"},"+="),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
                `),n("span",{class:"token keyword"},"case"),s(),n("span",{class:"token number"},"4"),n("span",{class:"token operator"},":"),s(" second"),n("span",{class:"token operator"},"-="),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token keyword"},"break"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" res"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`；
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),kn=n("div",{class:"language-go line-numbers-mode","data-ext":"go"},[n("pre",{class:"language-go"},[n("code",null,[n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"spiralOrder"),n("span",{class:"token punctuation"},"("),s("matrix "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token punctuation"},"{"),s(`
    res `),n("span",{class:"token operator"},":="),s(),n("span",{class:"token function"},"make"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(`
    upboundy`),n("span",{class:"token punctuation"},","),s("downboundy"),n("span",{class:"token punctuation"},","),s("leftboundy"),n("span",{class:"token punctuation"},","),s("rightboundy "),n("span",{class:"token operator"},":="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("matrix"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("matrix"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"<"),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("matrix"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"*"),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),s("matrix"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" upboundy"),n("span",{class:"token operator"},"<="),s("downboundy"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"for"),s(" i"),n("span",{class:"token operator"},":="),s("leftboundy"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},"<="),s("rightboundy"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},"{"),s(`
                res `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"append"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},","),s("matrix"),n("span",{class:"token punctuation"},"["),s("upboundy"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            upboundy`),n("span",{class:"token operator"},"++"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" leftboundy"),n("span",{class:"token operator"},"<="),s("rightboundy"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"for"),s(" i"),n("span",{class:"token operator"},":="),s("upboundy"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},"<="),s("downboundy"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},"{"),s(`
                res `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"append"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},","),s("matrix"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("rightboundy"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            rightboundy`),n("span",{class:"token operator"},"--"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" upboundy"),n("span",{class:"token operator"},"<="),s("downboundy"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"for"),s(" i"),n("span",{class:"token operator"},":="),s("rightboundy"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},">="),s("leftboundy"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},"{"),s(`   
                res `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"append"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},","),s("matrix"),n("span",{class:"token punctuation"},"["),s("downboundy"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            downboundy`),n("span",{class:"token operator"},"--"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" leftboundy"),n("span",{class:"token operator"},"<="),s("rightboundy"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"for"),s(" i"),n("span",{class:"token operator"},":="),s("downboundy"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},">="),s("upboundy"),n("span",{class:"token punctuation"},";"),s("i"),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},"{"),s(`
                res `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"append"),n("span",{class:"token punctuation"},"("),s("res"),n("span",{class:"token punctuation"},","),s("matrix"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("leftboundy"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            leftboundy`),n("span",{class:"token operator"},"++"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(` res
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),rn=n("hr",null,null,-1),dn={id:"_41-缺失的第一个正数",tabindex:"-1"},mn=n("a",{class:"header-anchor",href:"#_41-缺失的第一个正数","aria-hidden":"true"},"#",-1),bn={href:"https://leetcode.cn/problems/first-missing-positive/",target:"_blank",rel:"noopener noreferrer"},vn=p(`<blockquote><p>给你一个未排序的整数数组 <code>nums</code> ，请你找出其中没有出现的最小的正整数。</p><p>请你实现时间复杂度为 <code>O(n)</code> 并且只使用常数级别额外空间的解决方案。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">firstMissingPositive</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">{</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),hn={id:"_240-搜索二维矩阵-ii",tabindex:"-1"},fn=n("a",{class:"header-anchor",href:"#_240-搜索二维矩阵-ii","aria-hidden":"true"},"#",-1),yn={href:"https://leetcode.cn/problems/search-a-2d-matrix-ii/",target:"_blank",rel:"noopener noreferrer"},wn=p(`<blockquote><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：</p><ul><li>每行的元素从左到右升序排列。</li><li>每列的元素从上到下升序排列。</li></ul></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>matrix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
     n<span class="token punctuation">,</span>m<span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">for</span> n<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>m<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">!=</span>target<span class="token punctuation">{</span>
            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">{</span>
                m<span class="token operator">--</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                n<span class="token operator">++</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),gn={id:"_470-用rand7-实现-rand10",tabindex:"-1"},_n=n("a",{class:"header-anchor",href:"#_470-用rand7-实现-rand10","aria-hidden":"true"},"#",-1),xn={href:"https://leetcode.cn/problems/implement-rand10-using-rand7",target:"_blank",rel:"noopener noreferrer"},qn=p(`<blockquote><p>给定方法 rand7 可生成 [1,7] 范围内的均匀随机整数，试写一个方法 rand10 生成 [1,10] 范围内的均匀随机整数。</p><p>你只能调用 rand7() 且不能调用其他方法。请不要使用系统的 Math.random() 方法。</p><p>每个测试用例将有一个内部参数 n，即你实现的函数 rand10() 在测试时将被调用的次数。请注意，这不是传递给 rand10() 的参数。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">rand10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">{</span>
        num <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token function">rand7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token function">rand7</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> num <span class="token operator">&lt;=</span> <span class="token number">40</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> num<span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),jn={id:"_440-字典序的第k小数字",tabindex:"-1"},Nn=n("a",{class:"header-anchor",href:"#_440-字典序的第k小数字","aria-hidden":"true"},"#",-1),Cn={href:"https://leetcode.cn/problems/k-th-smallest-in-lexicographical-order/",target:"_blank",rel:"noopener noreferrer"},Mn=p(`<blockquote><p>给定整数 <code>n</code> 和 <code>k</code>，返回 <code>[1, n]</code> 中字典序第 <code>k</code> 小的数字。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">findKthNumber</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	p <span class="token operator">:=</span> <span class="token number">1</span>
	prefix <span class="token operator">:=</span> <span class="token number">1</span>
	<span class="token keyword">for</span> p <span class="token operator">&lt;</span> k <span class="token punctuation">{</span>
		count <span class="token operator">:=</span> <span class="token number">0</span>
		currentNode <span class="token operator">:=</span> prefix
		nextNode <span class="token operator">:=</span> prefix <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token keyword">for</span> currentNode <span class="token operator">&lt;=</span> n <span class="token punctuation">{</span>
			count <span class="token operator">+=</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>nextNode<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> currentNode
			currentNode <span class="token operator">*=</span> <span class="token number">10</span>
			nextNode <span class="token operator">*=</span> <span class="token number">10</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> p<span class="token operator">+</span>count <span class="token operator">&gt;</span> k <span class="token punctuation">{</span>
			prefix <span class="token operator">*=</span> <span class="token number">10</span>
			p<span class="token operator">++</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			prefix<span class="token operator">++</span>
			p <span class="token operator">+=</span> count
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> prefix
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),Ln={id:"_239-滑动窗口最大值",tabindex:"-1"},Pn=n("a",{class:"header-anchor",href:"#_239-滑动窗口最大值","aria-hidden":"true"},"#",-1),Qn={href:"https://leetcode.cn/problems/sliding-window-maximum/",target:"_blank",rel:"noopener noreferrer"},Rn=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> MaxQueue <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Queue <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>MaxQueue<span class="token punctuation">{</span>
    queue <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> MaxQueue<span class="token punctuation">{</span>Queue<span class="token punctuation">:</span>queue<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MaxQueue<span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>this<span class="token punctuation">.</span>Queue<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>n<span class="token punctuation">{</span>
        this<span class="token punctuation">.</span>Queue <span class="token operator">=</span> this<span class="token punctuation">.</span>Queue<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Queue<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    this<span class="token punctuation">.</span>Queue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>Queue<span class="token punctuation">,</span>n<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MaxQueue<span class="token punctuation">)</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">int</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> this<span class="token punctuation">.</span>Queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>MaxQueue<span class="token punctuation">)</span><span class="token function">pop</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> n<span class="token operator">==</span>this<span class="token punctuation">.</span>Queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
        this<span class="token punctuation">.</span>Queue <span class="token operator">=</span> this<span class="token punctuation">.</span>Queue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    window <span class="token operator">:=</span> <span class="token function">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    res <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> i<span class="token operator">&lt;</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">{</span>
            window<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            window<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>window<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            window<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token comment">//  ---</span>
<span class="token keyword">func</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> stack <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
    <span class="token keyword">var</span> res <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            stack <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        stack <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token keyword">if</span> i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&gt;</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            stack <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&gt;=</span> k <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,2),Un={id:"_152-乘积最大子数组",tabindex:"-1"},Sn=n("a",{class:"header-anchor",href:"#_152-乘积最大子数组","aria-hidden":"true"},"#",-1),On={href:"https://leetcode.cn/problems/maximum-product-subarray/",target:"_blank",rel:"noopener noreferrer"},Dn=p(`<blockquote><p>给你一个整数数组 nums ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><p>测试用例的答案是一个 32-位 整数。</p><p>子数组 是数组的连续子序列。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
	maxDP <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    minDP <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
    maxDP<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minDP<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    maxValue <span class="token operator">:=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>
        maxDP<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">Max</span><span class="token punctuation">(</span>maxDP<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> minDP<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        minDP<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">Min</span><span class="token punctuation">(</span>maxDP<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> minDP<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        maxValue <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">,</span> maxDP<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> maxValue
<span class="token punctuation">}</span>


<span class="token keyword">func</span> <span class="token function">Max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">{</span>
		<span class="token keyword">return</span> a
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),Vn={id:"_79-单词搜索",tabindex:"-1"},zn=n("a",{class:"header-anchor",href:"#_79-单词搜索","aria-hidden":"true"},"#",-1),Tn={href:"https://leetcode.cn/problems/word-search/",target:"_blank",rel:"noopener noreferrer"},An=p(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">exist</span><span class="token punctuation">(</span>board <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> word <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
  
    words<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> j<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">{</span>     <span class="token comment">// 寻找到匹配的第一个字符</span>
                <span class="token keyword">if</span> <span class="token function">search</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> board<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>


<span class="token keyword">func</span> search <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">,</span> board <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> words <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>

	m<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> m <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span>n <span class="token operator">||</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">{</span>   <span class="token comment">// 不符合的条件</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">{</span>	<span class="token comment">// 匹配到最后一个值， 返回</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span>
	
	tmp <span class="token operator">:=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
	board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;1&#39;</span>   <span class="token comment">// 由于words只能是字母，所以&#39;1&#39;不会被匹配</span>

	<span class="token keyword">if</span> <span class="token function">search</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> board<span class="token punctuation">,</span> words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">search</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> board<span class="token punctuation">,</span> words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">search</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> board<span class="token punctuation">,</span> words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">search</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> board<span class="token punctuation">,</span> words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		
        <span class="token keyword">return</span> <span class="token boolean">true</span>
	
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        
        <span class="token comment">//注意由于board是slice引用类型，所以函数的修改会真正的修改原slice的值，所以需要重新改正回来</span>
		board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,2),In={id:"_128-最长连续序列",tabindex:"-1"},Kn=n("a",{class:"header-anchor",href:"#_128-最长连续序列","aria-hidden":"true"},"#",-1),Hn={href:"https://leetcode.cn/problems/longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},Gn=p(`<blockquote><p>给定一个未排序的整数数组 nums ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 O(n) 的算法解决此问题。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    exist <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    length <span class="token operator">:=</span> <span class="token number">1</span>
    res <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> exist<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        exist<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>exist<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            length <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            length<span class="token operator">++</span>
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> b
<span class="token punctuation">}</span>

<span class="token comment">//并查集</span>
<span class="token keyword">func</span> <span class="token function">find</span><span class="token punctuation">(</span>h <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> x <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span>	<span class="token operator">==</span> x <span class="token punctuation">{</span>
		<span class="token keyword">return</span> x
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
	h <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	count <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	max <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
		<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
		h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i
		count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
		laddr<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
		<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
			head <span class="token operator">:=</span> <span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> laddr<span class="token punctuation">)</span>
			h<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> i
			count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">+</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
		raddr<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
		<span class="token keyword">if</span> ok <span class="token punctuation">{</span>
			head <span class="token operator">:=</span> <span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> raddr<span class="token punctuation">)</span>
			h<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> i
			count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">+</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max <span class="token punctuation">{</span>
			max <span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> max
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),En={id:"_48-旋转图像",tabindex:"-1"},Bn=n("a",{class:"header-anchor",href:"#_48-旋转图像","aria-hidden":"true"},"#",-1),Wn={href:"https://leetcode.cn/problems/rotate-image/",target:"_blank",rel:"noopener noreferrer"},Yn=p(`<blockquote><p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">rotate</span><span class="token punctuation">(</span>matrix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> 
            matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> 
            matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),Fn={id:"_169-多数元素",tabindex:"-1"},Jn=n("a",{class:"header-anchor",href:"#_169-多数元素","aria-hidden":"true"},"#",-1),Xn={href:"https://leetcode.cn/problems/majority-element/",target:"_blank",rel:"noopener noreferrer"},Zn=p(`<blockquote><p>给定一个大小为 n 的数组 nums ，返回其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    major <span class="token operator">:=</span> <span class="token number">0</span>
    count <span class="token operator">:=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
        <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            major <span class="token operator">=</span> num
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> major <span class="token operator">==</span> num <span class="token punctuation">{</span>
            count <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            count <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> major
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),$n={id:"_179-最大数",tabindex:"-1"},ns=n("a",{class:"header-anchor",href:"#_179-最大数","aria-hidden":"true"},"#",-1),ss={href:"https://leetcode.cn/problems/largest-number/",target:"_blank",rel:"noopener noreferrer"},as=p(`<blockquote><p>给定一组非负整数 <code>nums</code>，重新排列每个数的顺序（每个数不可拆分）使之组成一个最大的整数。</p><p>**注意：**输出结果可能非常大，所以你需要返回一个字符串而不是整。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Map</span><span class="token punctuation">(</span>vs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    vsm <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>vs<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> vs <span class="token punctuation">{</span>
        vsm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> vsm
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">largestNumber</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    strs <span class="token operator">:=</span> <span class="token function">Map</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    
    <span class="token keyword">if</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;0&quot;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,3),ts={id:"_560-和为-k-的子数组",tabindex:"-1"},ps=n("a",{class:"header-anchor",href:"#_560-和为-k-的子数组","aria-hidden":"true"},"#",-1),os={href:"https://leetcode.cn/problems/subarray-sum-equals-k/",target:"_blank",rel:"noopener noreferrer"},es=p(`<blockquote><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你统计并返回该数组中和为 <code>k</code> 的连续子数组的个数 。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	count <span class="token operator">:=</span> <span class="token number">0</span>
	hash <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>
	preSum <span class="token operator">:=</span> <span class="token number">0</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		preSum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token keyword">if</span> hash<span class="token punctuation">[</span>preSum<span class="token operator">-</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			count <span class="token operator">+=</span> hash<span class="token punctuation">[</span>preSum<span class="token operator">-</span>k<span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
		hash<span class="token punctuation">[</span>preSum<span class="token punctuation">]</span><span class="token operator">++</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> count
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),cs={id:"_498-对角线遍历",tabindex:"-1"},ls=n("a",{class:"header-anchor",href:"#_498-对角线遍历","aria-hidden":"true"},"#",-1),us={href:"https://leetcode.cn/problems/diagonal-traverse/",target:"_blank",rel:"noopener noreferrer"},is=p(`<blockquote><p>给你一个大小为 <code>m x n</code> 的矩阵 <code>mat</code> ，请以对角线遍历的顺序，用一个数组返回这个矩阵中的所有元素。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">findDiagonalOrder</span><span class="token punctuation">(</span>mat <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	m<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	ret <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> m<span class="token operator">*</span>n<span class="token punctuation">)</span>
	r<span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mat<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			 <span class="token keyword">if</span> c <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
				r<span class="token operator">++</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				c<span class="token operator">++</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				r<span class="token punctuation">,</span> c <span class="token operator">=</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token operator">+</span><span class="token number">1</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> r <span class="token operator">==</span> m<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
				c<span class="token operator">++</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
				r<span class="token operator">++</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				r<span class="token punctuation">,</span> c <span class="token operator">=</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token operator">-</span><span class="token number">1</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ks={id:"_207-课程表",tabindex:"-1"},rs=n("a",{class:"header-anchor",href:"#_207-课程表","aria-hidden":"true"},"#",-1),ds={href:"https://leetcode.cn/problems/course-schedule/",target:"_blank",rel:"noopener noreferrer"},ms=p(`<blockquote><p>你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。</p><p>在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程 bi 。</p><p>例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。 请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">canFinish</span><span class="token punctuation">(</span>numCourses <span class="token builtin">int</span><span class="token punctuation">,</span> prerequisites <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    degrees <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> numCourses<span class="token punctuation">)</span>
    g <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> prerequisites<span class="token punctuation">{</span>
        g<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        degrees<span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span>
    <span class="token punctuation">}</span>

    nodes <span class="token operator">:=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// bfs 队列</span>
    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> degrees<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">{</span>
            nodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    res <span class="token operator">:=</span> <span class="token number">0</span>
    nodesLen <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span>
    <span class="token keyword">for</span> nodesLen<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nodesLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">{</span>
            res<span class="token operator">++</span>
            degrees<span class="token punctuation">[</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span>
            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> next <span class="token operator">:=</span> <span class="token keyword">range</span> g<span class="token punctuation">[</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
                degrees<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token operator">--</span>
                <span class="token keyword">if</span> degrees<span class="token punctuation">[</span>next<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">{</span>
                    nodes <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> next<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        nodes <span class="token operator">=</span> nodes<span class="token punctuation">[</span>nodesLen<span class="token punctuation">:</span><span class="token punctuation">]</span>
        nodesLen <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> res <span class="token operator">==</span> numCourses
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),bs={id:"_11-盛最多水的容器",tabindex:"-1"},vs=n("a",{class:"header-anchor",href:"#_11-盛最多水的容器","aria-hidden":"true"},"#",-1),hs={href:"https://leetcode.cn/problems/container-with-most-water/",target:"_blank",rel:"noopener noreferrer"},fs=p(`<blockquote><p>给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。</p><p>找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p>说明：你不能倾斜容器。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>height <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ans <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">for</span> left <span class="token operator">&lt;</span> right <span class="token punctuation">{</span>
        area <span class="token operator">:=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> area<span class="token punctuation">)</span>
        <span class="token keyword">if</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token punctuation">{</span>
            left<span class="token operator">++</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            right<span class="token operator">--</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> a <span class="token operator">&gt;</span> b <span class="token punctuation">{</span> <span class="token keyword">return</span> b <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">return</span> a <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">{</span> <span class="token keyword">return</span> b <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">return</span> a <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ys={id:"_74-搜索二维矩阵",tabindex:"-1"},ws=n("a",{class:"header-anchor",href:"#_74-搜索二维矩阵","aria-hidden":"true"},"#",-1),gs={href:"https://leetcode.cn/problems/search-a-2d-matrix/",target:"_blank",rel:"noopener noreferrer"},_s=p(`<blockquote><p>编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p><p>每行中的整数从左到右按升序排列。 每行的第一个整数大于前一行的最后一个整数。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>matrix <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> r<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token operator">:=</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> c<span class="token punctuation">;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span>
		<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">{</span>
			j<span class="token operator">++</span>
		<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
			i<span class="token operator">--</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function xs(qs,js){const t=i("ExternalLinkIcon"),u=i("CodeTabs");return r(),d("div",null,[n("h3",b,[v,s(),n("a",h,[s("1.两数之和"),a(t)])]),f,n("h3",y,[w,s(),n("a",g,[s("146.LRU缓存"),a(t)])]),_,x,a(u,{id:"27",data:[{title:"cpp"},{title:"golang"}]},{tab0:o(({title:e,value:c,isActive:l})=>[q]),tab1:o(({title:e,value:c,isActive:l})=>[j]),_:1}),N,n("h3",C,[M,s(),n("a",L,[s("15.三数之和"),a(t)])]),P,a(u,{id:"65",data:[{title:"cpp"},{title:"golang"}]},{tab0:o(({title:e,value:c,isActive:l})=>[Q]),tab1:o(({title:e,value:c,isActive:l})=>[R]),_:1}),U,n("h3",S,[O,s(),n("a",D,[s("42.接雨水"),a(t)])]),V,z,T,a(u,{id:"97",data:[{title:"cpp"},{title:"golang"}]},{tab0:o(({title:e,value:c,isActive:l})=>[A]),tab1:o(({title:e,value:c,isActive:l})=>[I]),_:1}),K,n("h3",H,[G,s(),n("a",E,[s("704.二分查找"),a(t)])]),B,n("h3",W,[Y,s(),n("a",F,[s("7.整数反转"),a(t)])]),J,n("h3",X,[Z,s(),n("a",$,[s("69.x的平方根"),a(t)])]),nn,n("h3",sn,[an,s(),n("a",tn,[s("209.长度最小的子数组"),a(t)])]),pn,n("h3",on,[en,s(),n("a",cn,[s("54.螺旋矩阵"),a(t)])]),ln,a(u,{id:"175",data:[{title:"cpp"},{title:"golang"}]},{tab0:o(({title:e,value:c,isActive:l})=>[un]),tab1:o(({title:e,value:c,isActive:l})=>[kn]),_:1}),rn,n("h3",dn,[mn,s(),n("a",bn,[s("41.缺失的第一个正数"),a(t)])]),vn,n("h3",hn,[fn,s(),n("a",yn,[s("240.搜索二维矩阵 II"),a(t)])]),wn,n("h3",gn,[_n,s(),n("a",xn,[s("470.用Rand7() 实现 Rand10()"),a(t)])]),qn,n("h3",jn,[Nn,s(),n("a",Cn,[s("440.字典序的第K小数字"),a(t)])]),Mn,n("h3",Ln,[Pn,s(),n("a",Qn,[s("239.滑动窗口最大值"),a(t)])]),Rn,n("h3",Un,[Sn,s(),n("a",On,[s("152.乘积最大子数组"),a(t)])]),Dn,n("h3",Vn,[zn,s(),n("a",Tn,[s("79.单词搜索"),a(t)])]),An,n("h3",In,[Kn,s(),n("a",Hn,[s("128.最长连续序列"),a(t)])]),Gn,n("h3",En,[Bn,s(),n("a",Wn,[s("48.旋转图像"),a(t)])]),Yn,n("h3",Fn,[Jn,s(),n("a",Xn,[s("169.多数元素"),a(t)])]),Zn,n("h3",$n,[ns,s(),n("a",ss,[s("179.最大数"),a(t)])]),as,n("h3",ts,[ps,s(),n("a",os,[s("560.和为 K 的子数组"),a(t)])]),es,n("h3",cs,[ls,s(),n("a",us,[s("498.对角线遍历"),a(t)])]),is,n("h3",ks,[rs,s(),n("a",ds,[s("207.课程表"),a(t)])]),ms,n("h3",bs,[vs,s(),n("a",hs,[s("11.盛最多水的容器"),a(t)])]),fs,n("h3",ys,[ws,s(),n("a",gs,[s("74.搜索二维矩阵"),a(t)])]),_s])}const Cs=k(m,[["render",xs],["__file","other.html.vue"]]);export{Cs as default};
