import{_ as e,X as o,Y as c,Z as n,$ as s,a0 as t,a2 as p,H as l}from"./framework-edbf9e3c.js";const i={},u={id:"进程和线程之间有什么区别",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#进程和线程之间有什么区别","aria-hidden":"true"},"#",-1),r=p("<ul><li><strong>根本区别</strong>： 进程是操作系统进行资源分配的最小单元，线程是操作系统进行运算调度的最小单元。</li><li><strong>从属关系不同</strong>：进程中包含线程，线程属于进程。</li><li><strong>开销不同</strong>：进程的创建、销毁和切换开销远大于线程。</li><li><strong>拥有资源不同</strong>：每个进程有独立的内存和资源，一个进程中的线程会共享本进程的地址空间和资源如内存、I/O等。</li><li><strong>控制和影响力不同</strong>：子进程无法影响父进程，子线程可以影响父线程，如果主线程发生异常会影响所在进程和子线程。</li><li><strong>CPU利用率不同</strong>：进程的CPU利用率较低，上下文切换开销大，线程CPU利用率较高，上下文切换速度快。</li></ul>",1),d={id:"进程间有哪些通信方式",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#进程间有哪些通信方式","aria-hidden":"true"},"#",-1),m=p("<ul><li><strong>管道</strong>：管道是一种半双工通信方式，数据单向流动。分为匿名管道和命名管道。匿名管道只能在具有亲缘关系的进程间使用，通常是父子进程关系，命名管道相比于匿名管道提供了一个路径名来关联，以FIFO的文件形式存在于文件系统中。只要访问该路径，就可以通过FIFO通信。缺点在于需要等待接收消息方接受完毕发送消息方才能返回。</li><li><strong>消息队列</strong>：消息队列是消息链表，存放内核中并由消息队列标识符标识，发送消息方将消息放入队列，接收消息方通过队列获取消息。缺点在于如果发送数据较大，会产生拷贝开销。</li><li><strong>共享内存</strong>：将两个进程的不同的虚拟地址空间映射到同一块物理内存从而实现共享内存，避免消息拷贝开销。缺点是需要处理多线程竞争线程安全问题。</li><li><strong>信号量</strong>：本质为一个计数器，实现进程互斥与同步。</li><li><strong>信号</strong>：用于通知接收进程某个事件已经发生。</li><li><strong>Socket(套接字)</strong>：本地套接字用于本地进程间通讯，也可以创建网络套接字用于不同机器间的进程通信。</li></ul>",1),h={id:"线程间有哪些通信方式",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#线程间有哪些通信方式","aria-hidden":"true"},"#",-1),_=n("p",null,"同一进程的线程共享地址空间，通信通过共享内存，一般来说只需要做好同步/互斥，保护共享的全局变量。",-1),y=n("ul",null,[n("li",null,[n("strong",null,"锁机制"),s("：包括互斥锁，读写锁，自旋锁，条件变量。互斥锁提供排他方式防止数据结构被修改的方法，读写锁允许多个线程同时读共享变量，对写操作互斥，自旋锁循环检测是否释放锁，条件变量以原子方式阻塞进程，直到条件为真，与互斥锁一起使用。")]),n("li",null,[n("strong",null,"信号量机制"),s("：包括无名线程信号量和命名线程信号量。")]),n("li",null,[n("strong",null,"信号机制"),s("：类似进程信号处理。")])],-1),g={id:"进程有多少种状态",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#进程有多少种状态","aria-hidden":"true"},"#",-1),f=n("p",null,[n("strong",null,"五种状态：创建态、就绪态、运行态、阻塞态、终止态")],-1),x=n("p",null,"创建态：进程正在被创建，系统初始化PCB，分配资源",-1),T=n("p",null,"就绪态：具备运行条件，还没有被调度",-1),S=n("p",null,"运行态：占用CPU，在CPU上执行",-1),q=n("p",null,"阻塞态：等待某件事不能运行",-1),P=n("p",null,"终止态：进程从系统撤销，回收资源，撤销PCB",-1),C={id:"进程空间从高位到低位都有些什么",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#进程空间从高位到低位都有些什么","aria-hidden":"true"},"#",-1),U=n("p",null,"更新中......",-1),j={id:"linux进程调度的算法",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#linux进程调度的算法","aria-hidden":"true"},"#",-1),E=p("<ul><li><strong>先到先服务(FCFS)调度</strong>:从就绪队列中选择一个最先进入该队列的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li><li><strong>短作业优先(SJF)的调度</strong>:从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li><li><strong>时间片轮转调度</strong>:时间片轮转调度又称 RR(Round robin)调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。</li><li><strong>多级反馈队列调度</strong>：多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业(进程)迅速完成。，因而它是目前被公认的一种较好的进程调度算法，UNIX 操作系统采取的便是这种调度算法。</li><li><strong>优先级调度</strong>：为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以FCFS方式执行。可以根据内存要求，时间要求或任何其他资源要求来确定优先级。</li></ul>",1),F={id:"线程有多少种状态-状态之间如何转换",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#线程有多少种状态-状态之间如何转换","aria-hidden":"true"},"#",-1),B=n("p",null,[n("strong",null,"五种状态：创建态、就绪态、运行态、阻塞态、终止态")],-1),R=n("p",null,"创建态：创建一个新的线程对象",-1),V=n("p",null,"就绪态：线程创建后，被调用变为可运行，除了CPU资源其他资源都已经获得",-1),z=n("p",null,"运行态：获得CPU资源，在CPU上执行",-1),L=n("p",null,"阻塞态：线程放弃CPU使用权，暂时停止运行",-1),X=n("p",null,"终止态：线程执行完毕或因异常退出，线程结束生命周期",-1),A={id:"系统调用的过程是怎样的-操作系统是通过什么机制触发系统调用的",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#系统调用的过程是怎样的-操作系统是通过什么机制触发系统调用的","aria-hidden":"true"},"#",-1),J=n("p",null,"更新中......",-1),Y={id:"信号量是如何实现的",tabindex:"-1"},Z=n("a",{class:"header-anchor",href:"#信号量是如何实现的","aria-hidden":"true"},"#",-1),$=n("p",null,"更新中......",-1),D={id:"什么情况下-进程会进行切换",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#什么情况下-进程会进行切换","aria-hidden":"true"},"#",-1),K=n("p",null,"进程切换一定发生在中断/异常/系统调用处理过程中，常见的有以下情况：",-1),M=n("ul",null,[n("li",null,"时间片中断、IO中断后或更改优先级进程；(导致被中断进程进入就绪态)；"),n("li",null,"阻塞式系统调用、虚拟地址异常；(导致被中断进程进入阻塞态)"),n("li",null,"终止用系统调用、不能继续执行的异常；(导致被中断进程进入终止态)")],-1),Q={id:"创建进程的流程",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#创建进程的流程","aria-hidden":"true"},"#",-1),nn=n("p",null,"更新中......",-1),sn={id:"共享内存是如何实现的",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#共享内存是如何实现的","aria-hidden":"true"},"#",-1),tn=n("p",null,"更新中......",-1),pn={id:"创建线程有多少种方式",tabindex:"-1"},en=n("a",{class:"header-anchor",href:"#创建线程有多少种方式","aria-hidden":"true"},"#",-1),on=n("p",null,"更新中......",-1),cn={id:"进程通信中的管道实现原理是什么",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#进程通信中的管道实现原理是什么","aria-hidden":"true"},"#",-1),un=n("p",null,"管道是由内核管理的一个缓冲区。管道的一端连接一个进程的输出。这个进程会向管道中放入信息。管道的另一端连接一个进程的输入，这个进程取出被放入管道的信息。一个缓冲区被设计成为环形的数据结构，以便管道可以被循环利用。当管道中没有信息的话，从管道中读取的进程会等待，直到另一端的进程放入信息。当管道被放满信息的时候，尝试放入信息的进程会等待，直到另一端的进程取出信息。当两个进程都终结的时候，管道也自动消失。",-1),kn={id:"多线程和多进程的区别是什么",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#多线程和多进程的区别是什么","aria-hidden":"true"},"#",-1),dn=n("ul",null,[n("li",null,[n("strong",null,"数据共享"),s("：多进程资源与内存相互独立，共享复杂，同步简单，多线程共享同一个进程的数据，共享简单，同步复杂。")]),n("li",null,[n("strong",null,"占用内存"),s("：多进程占用内存多，切换复杂，CPU利用率低，多线程占用内存少，切换简单，CPU利用率高。")]),n("li",null,[n("strong",null,"开销"),s("：多进程创建销毁和切换复杂，多线程创建销毁和切换简单。")]),n("li",null,[n("strong",null,"互相之间影响"),s("：进程间不会相互影响，线程会互相影响，一个线程挂掉将导致整个进程结束")])],-1),vn={id:"两个线程交替打印一个共享变量",tabindex:"-1"},mn=n("a",{class:"header-anchor",href:"#两个线程交替打印一个共享变量","aria-hidden":"true"},"#",-1),hn=p(`<p>以两个线程交替打印0-100奇偶数为例</p><p><strong>方法一</strong>：令两个线程分别只负责打印奇数偶数，令两个线程争抢一个锁，缺点为如果一个线程一直抢锁，另一个线程拿不到锁就会导致空转</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token comment">// 全局变量 count</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 锁</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test<span class="token punctuation">.</span><span class="token function">turning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> even <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取锁</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 只处理偶数</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;偶数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> odd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取锁</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 只处理奇数</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;奇数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        even<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        odd<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法二</strong>：线程1打印之后唤醒其他线程，然后让出锁，自己进入休眠状态，线程2同理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token comment">// 全局变量 count</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 锁</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test<span class="token punctuation">.</span><span class="token function">turning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TurningRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;偶数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 确保偶数线程线先获取到锁</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TurningRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;奇数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">TurningRunner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 获取锁</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 拿到锁就打印</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 唤醒其他线程</span>
                    lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 如果任务还没有结束，则让出当前的锁并休眠</span>
                            lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法三</strong>：利用信号量 Semaphore 实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintNum</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Semaphore</span> odd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Semaphore</span> even <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">PrintNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                odd<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;奇数&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            even<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printEven</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                even<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;偶数&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            odd<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">PrintNum</span> printNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintNum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            printNum<span class="token punctuation">.</span><span class="token function">printOdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            printNum<span class="token punctuation">.</span><span class="token function">printEven</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),bn={id:"linux下如何查到端口被哪个进程占用",tabindex:"-1"},_n=n("a",{class:"header-anchor",href:"#linux下如何查到端口被哪个进程占用","aria-hidden":"true"},"#",-1),yn=n("p",null,"两个方法",-1),gn=n("ol",null,[n("li",null,"lsof -i:端口号"),n("li",null,"netstat -tunlp|grep 端口号")],-1),wn={id:"为什么进程切换慢-线程切换快",tabindex:"-1"},fn=n("a",{class:"header-anchor",href:"#为什么进程切换慢-线程切换快","aria-hidden":"true"},"#",-1),xn=n("p",null,"更新中......",-1);function Tn(Sn,qn){const a=l("Badge");return o(),c("div",null,[n("h3",u,[k,s(" 进程和线程之间有什么区别？"),t(a,{text:"重点",type:"danger"})]),r,n("h3",d,[v,s(" 进程间有哪些通信方式？"),t(a,{text:"重点",type:"danger"})]),m,n("h3",h,[b,s(" 线程间有哪些通信方式？"),t(a,{text:"重点",type:"danger"})]),_,y,n("h3",g,[w,s(" 进程有多少种状态？"),t(a,{text:"掌握",type:"tip"})]),f,x,T,S,q,P,n("h3",C,[N,s(" 进程空间从高位到低位都有些什么？"),t(a,{text:"掌握",type:"tip"})]),U,n("h3",j,[O,s(" Linux进程调度的算法？"),t(a,{text:"重点",type:"danger"})]),E,n("h3",F,[I,s(" 线程有多少种状态，状态之间如何转换？"),t(a,{text:"掌握",type:"tip"})]),B,R,V,z,L,X,n("h3",A,[H,s(" 系统调用的过程是怎样的？操作系统是通过什么机制触发系统调用的？"),t(a,{text:"了解",type:"info"})]),J,n("h3",Y,[Z,s(" 信号量是如何实现的？"),t(a,{text:"了解",type:"info"})]),$,n("h3",D,[G,s(" 什么情况下，进程会进行切换？"),t(a,{text:"掌握",type:"tip"})]),K,M,n("h3",Q,[W,s(" 创建进程的流程？"),t(a,{text:"掌握",type:"tip"})]),nn,n("h3",sn,[an,s(" 共享内存是如何实现的？"),t(a,{text:"了解",type:"info"})]),tn,n("h3",pn,[en,s(" 创建线程有多少种方式？"),t(a,{text:"了解",type:"info"})]),on,n("h3",cn,[ln,s(" 进程通信中的管道实现原理是什么？"),t(a,{text:"了解",type:"info"})]),un,n("h3",kn,[rn,s(" 多线程和多进程的区别是什么？"),t(a,{text:"掌握",type:"tip"})]),dn,n("h3",vn,[mn,s(" 两个线程交替打印一个共享变量？"),t(a,{text:"掌握",type:"tip"})]),hn,n("h3",bn,[_n,s(" Linux下如何查到端口被哪个进程占用？"),t(a,{text:"了解",type:"info"})]),yn,gn,n("h3",wn,[fn,s(" 为什么进程切换慢，线程切换快？"),t(a,{text:"了解",type:"info"})]),xn])}const Cn=e(i,[["render",Tn],["__file","process.html.vue"]]);export{Cn as default};
