const e=JSON.parse('{"key":"v-5a36cb06","path":"/golang/gc.html","title":"","lang":"zh-CN","frontmatter":{"description":"golang的垃圾回收？ golang GC 算法使用的是无分代（对象没有代际之分）、不整理（回收过程中不对对象进行移动与整理）、并发（与用户代码并发执行）的三色标记清扫算法。 三色标记法将对象分为三类，并用不同的颜色相称： 白色对象（可能死亡）：未被回收器访问到的对象。在回收开始阶段，所有对象均为白色，当回收结束后，白色对象均不可达; 灰色对象（波面...","head":[["meta",{"property":"og:url","content":"https://www.csguide.xyz/golang/gc.html"}],["meta",{"property":"og:site_name","content":"CSView"}],["meta",{"property":"og:description","content":"golang的垃圾回收？ golang GC 算法使用的是无分代（对象没有代际之分）、不整理（回收过程中不对对象进行移动与整理）、并发（与用户代码并发执行）的三色标记清扫算法。 三色标记法将对象分为三类，并用不同的颜色相称： 白色对象（可能死亡）：未被回收器访问到的对象。在回收开始阶段，所有对象均为白色，当回收结束后，白色对象均不可达; 灰色对象（波面..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":3,"title":"golang的垃圾回收？","slug":"golang的垃圾回收","link":"#golang的垃圾回收","children":[]},{"level":3,"title":"写屏障？","slug":"写屏障","link":"#写屏障","children":[]},{"level":3,"title":"垃圾回收的触发条件？","slug":"垃圾回收的触发条件","link":"#垃圾回收的触发条件","children":[]}],"git":{},"readingTime":{"minutes":2.39,"words":716},"filePathRelative":"golang/gc.md","autoDesc":true,"excerpt":""}');export{e as data};
