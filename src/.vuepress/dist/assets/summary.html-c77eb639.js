import{_ as n,W as a,X as s,a1 as e}from"./framework-17a5d3b6.js";const t={},p=e(`<h3 id="object类" tabindex="-1"><a class="header-anchor" href="#object类" aria-hidden="true">#</a> Object类</h3><p>Object类是Java所有类的父类，包含了所有对象最通用的方法，主要有：</p><ul><li><strong>equals</strong>：用于判断两个对象内容是否等同，没有重写的情况下与<code>==</code>相同，都是比较地址是否相同，而它设计出来的目的就是为了使程序员通过重写equals自定义比较对象的哪些内容，比如String的equals是比较字符串内容</li><li><strong>getClass</strong>：用于获取对象（堆）运行时的类对象（方法区）</li><li><strong>hashCode</strong>：用于获取对象的hashCode，主要应用于哈希桶相关容器的定位计算。</li><li><strong>toString</strong>：用于获取对象的字符串表示</li><li><strong>notify/notifyAll/wait</strong>：用于将线程唤醒/阻塞</li><li><strong>clone</strong>：用于拷贝对象</li></ul><h3 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝" aria-hidden="true">#</a> 深浅拷贝</h3><p>浅拷贝只拷贝对象本身，不对其属性中的引用类型创建新的对象，即拷贝前后的两个对象中的引用指向同一个对象。深拷贝则会为引用类型递归地创建新的对象。对于基本数据类型的属性则都会复制一份。Java中对象的clone方法默认是浅拷贝，如果想深拷贝可以重写clone来实现</p><figure><img src="https://i.loli.net/2021/09/12/OYFTNHqljiZGvpn.png" alt="image-20210831104309200" tabindex="0" loading="lazy"><figcaption>image-20210831104309200</figcaption></figure><h3 id="拆装箱原理" tabindex="-1"><a class="header-anchor" href="#拆装箱原理" aria-hidden="true">#</a> 拆装箱原理</h3><p>以Integer为例</p><p><code>Integer i = 10</code></p><p>装箱时自动调用Integer的valueOf(int)方法</p><p><code>int n = i</code></p><p>拆箱时自动调用Integer的intValue方法 <img src="https://i.loli.net/2021/09/12/J7RlX4TE58CvBPz.png" alt="image-20210831000034502" loading="lazy"> Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的，它们的参数如果在一定范围内，则会返回cache中已经存在的对象，否则new一个新对象返回</p><p>Double、Float的valueOf方法的实现是类似的，这两个没有范围，都返回新对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Boolean的valueOf都返回两个单例的变量之一</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Boolean</span> <span class="token constant">TRUE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Boolean</span> <span class="token constant">FALSE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">?</span> <span class="token constant">TRUE</span> <span class="token operator">:</span> <span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 &quot;==&quot;运算符的两个操作数都是 包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会触发自动拆箱的过程）</p><h3 id="string相关" tabindex="-1"><a class="header-anchor" href="#string相关" aria-hidden="true">#</a> String相关</h3><p><strong>String、StringBuilder和StringBuffer的主要区别</strong></p><ul><li><p>String中的字符数组有final修饰，因此不可变，每次给String类型的引用赋值都是新生成个对象再把该引用指过去，或者是指向字符串常量池中的对象</p></li><li><p>StringBuilder和StringBuffer都继承AbstractStringBuilder，其中的字符数组没有final修饰，可通过令其指向新的字符数组实现各种增删改查操作，二者都有功能相同的各种对其中字符串增删改查的方法，区别是后者的这些方法都加了synchronized修饰，是线程安全的</p></li></ul><p><strong>各自使用场景</strong></p><ul><li><p>String：操作少量数据</p></li><li><p>StringBuilder：操作大量数据，单线程</p></li><li><p>StringBuffer：操作大量数据，多线程</p></li></ul><h3 id="接口和抽象类的区别" tabindex="-1"><a class="header-anchor" href="#接口和抽象类的区别" aria-hidden="true">#</a> 接口和抽象类的区别</h3><ul><li>接口方法默认public，抽象类还有protected和default，它们都不能有private，因为生来只为被重写</li><li>接口只能有static、final变量，抽象类不一定</li><li>一个类只能继承一个类/抽象类，但可以实现多个接口。一个接口也可以继承多个接口</li><li>设计上讲，抽象类抽象一类事物，接口抽象一组行为</li><li>在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。jdk 8 的时候接口可以有默认方法和静态方法功能。Jdk 9 在接口中引入了私有方法和私有静态方法。</li></ul>`,25),o=[p];function l(c,i){return a(),s("div",null,o)}const u=n(t,[["render",l],["__file","summary.html.vue"]]);export{u as default};
